// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttendances(t *testing.T) {
	t.Parallel()

	query := Attendances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttendancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttendancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Attendances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttendancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttendanceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttendancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttendanceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Attendance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttendanceExists to return true, but got false.")
	}
}

func testAttendancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attendanceFound, err := FindAttendance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attendanceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttendancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Attendances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttendancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Attendances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttendancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attendanceOne := &Attendance{}
	attendanceTwo := &Attendance{}
	if err = randomize.Struct(seed, attendanceOne, attendanceDBTypes, false, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}
	if err = randomize.Struct(seed, attendanceTwo, attendanceDBTypes, false, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attendanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attendanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attendances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttendancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attendanceOne := &Attendance{}
	attendanceTwo := &Attendance{}
	if err = randomize.Struct(seed, attendanceOne, attendanceDBTypes, false, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}
	if err = randomize.Struct(seed, attendanceTwo, attendanceDBTypes, false, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attendanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attendanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attendanceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func attendanceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func attendanceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func attendanceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func attendanceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func attendanceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func attendanceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func attendanceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func attendanceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Attendance) error {
	*o = Attendance{}
	return nil
}

func testAttendancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Attendance{}
	o := &Attendance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attendanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Attendance object: %s", err)
	}

	AddAttendanceHook(boil.BeforeInsertHook, attendanceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attendanceBeforeInsertHooks = []AttendanceHook{}

	AddAttendanceHook(boil.AfterInsertHook, attendanceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attendanceAfterInsertHooks = []AttendanceHook{}

	AddAttendanceHook(boil.AfterSelectHook, attendanceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attendanceAfterSelectHooks = []AttendanceHook{}

	AddAttendanceHook(boil.BeforeUpdateHook, attendanceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attendanceBeforeUpdateHooks = []AttendanceHook{}

	AddAttendanceHook(boil.AfterUpdateHook, attendanceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attendanceAfterUpdateHooks = []AttendanceHook{}

	AddAttendanceHook(boil.BeforeDeleteHook, attendanceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attendanceBeforeDeleteHooks = []AttendanceHook{}

	AddAttendanceHook(boil.AfterDeleteHook, attendanceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attendanceAfterDeleteHooks = []AttendanceHook{}

	AddAttendanceHook(boil.BeforeUpsertHook, attendanceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attendanceBeforeUpsertHooks = []AttendanceHook{}

	AddAttendanceHook(boil.AfterUpsertHook, attendanceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attendanceAfterUpsertHooks = []AttendanceHook{}
}

func testAttendancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttendancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attendanceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttendanceToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Attendance
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AttendanceSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Attendance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAttendanceToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attendance
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attendanceDBTypes, false, strmangle.SetComplement(attendancePrimaryKeyColumns, attendanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Attendances[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testAttendanceToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attendance
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attendanceDBTypes, false, strmangle.SetComplement(attendancePrimaryKeyColumns, attendanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Attendances) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAttendancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttendancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttendanceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttendancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attendances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attendanceDBTypes = map[string]string{`ID`: `int`, `UserID`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `ClockedInID`: `int`, `ClockedOutID`: `int`}
	_                 = bytes.MinRead
)

func testAttendancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attendancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attendanceAllColumns) == len(attendancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttendancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attendanceAllColumns) == len(attendancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attendance{}
	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attendanceDBTypes, true, attendancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attendanceAllColumns, attendancePrimaryKeyColumns) {
		fields = attendanceAllColumns
	} else {
		fields = strmangle.SetComplement(
			attendanceAllColumns,
			attendancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttendanceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttendancesUpsert(t *testing.T) {
	t.Parallel()

	if len(attendanceAllColumns) == len(attendancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAttendanceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Attendance{}
	if err = randomize.Struct(seed, &o, attendanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attendance: %s", err)
	}

	count, err := Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attendanceDBTypes, false, attendancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attendance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attendance: %s", err)
	}

	count, err = Attendances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
