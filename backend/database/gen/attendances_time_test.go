// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttendancesTimes(t *testing.T) {
	t.Parallel()

	query := AttendancesTimes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttendancesTimesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttendancesTimesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AttendancesTimes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttendancesTimesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttendancesTimeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttendancesTimesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttendancesTimeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AttendancesTime exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttendancesTimeExists to return true, but got false.")
	}
}

func testAttendancesTimesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attendancesTimeFound, err := FindAttendancesTime(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attendancesTimeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttendancesTimesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AttendancesTimes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttendancesTimesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AttendancesTimes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttendancesTimesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attendancesTimeOne := &AttendancesTime{}
	attendancesTimeTwo := &AttendancesTime{}
	if err = randomize.Struct(seed, attendancesTimeOne, attendancesTimeDBTypes, false, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}
	if err = randomize.Struct(seed, attendancesTimeTwo, attendancesTimeDBTypes, false, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attendancesTimeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attendancesTimeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttendancesTimes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttendancesTimesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attendancesTimeOne := &AttendancesTime{}
	attendancesTimeTwo := &AttendancesTime{}
	if err = randomize.Struct(seed, attendancesTimeOne, attendancesTimeDBTypes, false, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}
	if err = randomize.Struct(seed, attendancesTimeTwo, attendancesTimeDBTypes, false, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attendancesTimeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attendancesTimeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attendancesTimeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func attendancesTimeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func attendancesTimeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func attendancesTimeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func attendancesTimeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func attendancesTimeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func attendancesTimeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func attendancesTimeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func attendancesTimeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttendancesTime) error {
	*o = AttendancesTime{}
	return nil
}

func testAttendancesTimesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AttendancesTime{}
	o := &AttendancesTime{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AttendancesTime object: %s", err)
	}

	AddAttendancesTimeHook(boil.BeforeInsertHook, attendancesTimeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attendancesTimeBeforeInsertHooks = []AttendancesTimeHook{}

	AddAttendancesTimeHook(boil.AfterInsertHook, attendancesTimeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attendancesTimeAfterInsertHooks = []AttendancesTimeHook{}

	AddAttendancesTimeHook(boil.AfterSelectHook, attendancesTimeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attendancesTimeAfterSelectHooks = []AttendancesTimeHook{}

	AddAttendancesTimeHook(boil.BeforeUpdateHook, attendancesTimeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attendancesTimeBeforeUpdateHooks = []AttendancesTimeHook{}

	AddAttendancesTimeHook(boil.AfterUpdateHook, attendancesTimeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attendancesTimeAfterUpdateHooks = []AttendancesTimeHook{}

	AddAttendancesTimeHook(boil.BeforeDeleteHook, attendancesTimeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attendancesTimeBeforeDeleteHooks = []AttendancesTimeHook{}

	AddAttendancesTimeHook(boil.AfterDeleteHook, attendancesTimeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attendancesTimeAfterDeleteHooks = []AttendancesTimeHook{}

	AddAttendancesTimeHook(boil.BeforeUpsertHook, attendancesTimeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attendancesTimeBeforeUpsertHooks = []AttendancesTimeHook{}

	AddAttendancesTimeHook(boil.AfterUpsertHook, attendancesTimeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attendancesTimeAfterUpsertHooks = []AttendancesTimeHook{}
}

func testAttendancesTimesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttendancesTimesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attendancesTimeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttendancesTimesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttendancesTimesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttendancesTimeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttendancesTimesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttendancesTimes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attendancesTimeDBTypes = map[string]string{`ID`: `int`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `PushedAt`: `datetime`, `Remark`: `varchar`}
	_                      = bytes.MinRead
)

func testAttendancesTimesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attendancesTimePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attendancesTimeAllColumns) == len(attendancesTimePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttendancesTimesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attendancesTimeAllColumns) == len(attendancesTimePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttendancesTime{}
	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attendancesTimeDBTypes, true, attendancesTimePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attendancesTimeAllColumns, attendancesTimePrimaryKeyColumns) {
		fields = attendancesTimeAllColumns
	} else {
		fields = strmangle.SetComplement(
			attendancesTimeAllColumns,
			attendancesTimePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttendancesTimeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttendancesTimesUpsert(t *testing.T) {
	t.Parallel()

	if len(attendancesTimeAllColumns) == len(attendancesTimePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAttendancesTimeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AttendancesTime{}
	if err = randomize.Struct(seed, &o, attendancesTimeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttendancesTime: %s", err)
	}

	count, err := AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attendancesTimeDBTypes, false, attendancesTimePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttendancesTime struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttendancesTime: %s", err)
	}

	count, err = AttendancesTimes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
