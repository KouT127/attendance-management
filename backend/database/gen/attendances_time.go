// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AttendancesTime is an object representing the database table.
type AttendancesTime struct {
	ID        uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	PushedAt  time.Time   `boil:"pushed_at" json:"pushed_at" toml:"pushed_at" yaml:"pushed_at"`
	Remark    null.String `boil:"remark" json:"remark,omitempty" toml:"remark" yaml:"remark,omitempty"`

	R *attendancesTimeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attendancesTimeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttendancesTimeColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	PushedAt  string
	Remark    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	PushedAt:  "pushed_at",
	Remark:    "remark",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AttendancesTimeWhere = struct {
	ID        whereHelperuint
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	PushedAt  whereHelpertime_Time
	Remark    whereHelpernull_String
}{
	ID:        whereHelperuint{field: "`attendances_time`.`id`"},
	CreatedAt: whereHelpernull_Time{field: "`attendances_time`.`created_at`"},
	UpdatedAt: whereHelpernull_Time{field: "`attendances_time`.`updated_at`"},
	PushedAt:  whereHelpertime_Time{field: "`attendances_time`.`pushed_at`"},
	Remark:    whereHelpernull_String{field: "`attendances_time`.`remark`"},
}

// AttendancesTimeRels is where relationship names are stored.
var AttendancesTimeRels = struct {
}{}

// attendancesTimeR is where relationships are stored.
type attendancesTimeR struct {
}

// NewStruct creates a new relationship struct
func (*attendancesTimeR) NewStruct() *attendancesTimeR {
	return &attendancesTimeR{}
}

// attendancesTimeL is where Load methods for each relationship are stored.
type attendancesTimeL struct{}

var (
	attendancesTimeAllColumns            = []string{"id", "created_at", "updated_at", "pushed_at", "remark"}
	attendancesTimeColumnsWithoutDefault = []string{"created_at", "updated_at", "pushed_at", "remark"}
	attendancesTimeColumnsWithDefault    = []string{"id"}
	attendancesTimePrimaryKeyColumns     = []string{"id"}
)

type (
	// AttendancesTimeSlice is an alias for a slice of pointers to AttendancesTime.
	// This should generally be used opposed to []AttendancesTime.
	AttendancesTimeSlice []*AttendancesTime
	// AttendancesTimeHook is the signature for custom AttendancesTime hook methods
	AttendancesTimeHook func(context.Context, boil.ContextExecutor, *AttendancesTime) error

	attendancesTimeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attendancesTimeType                 = reflect.TypeOf(&AttendancesTime{})
	attendancesTimeMapping              = queries.MakeStructMapping(attendancesTimeType)
	attendancesTimePrimaryKeyMapping, _ = queries.BindMapping(attendancesTimeType, attendancesTimeMapping, attendancesTimePrimaryKeyColumns)
	attendancesTimeInsertCacheMut       sync.RWMutex
	attendancesTimeInsertCache          = make(map[string]insertCache)
	attendancesTimeUpdateCacheMut       sync.RWMutex
	attendancesTimeUpdateCache          = make(map[string]updateCache)
	attendancesTimeUpsertCacheMut       sync.RWMutex
	attendancesTimeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attendancesTimeBeforeInsertHooks []AttendancesTimeHook
var attendancesTimeBeforeUpdateHooks []AttendancesTimeHook
var attendancesTimeBeforeDeleteHooks []AttendancesTimeHook
var attendancesTimeBeforeUpsertHooks []AttendancesTimeHook

var attendancesTimeAfterInsertHooks []AttendancesTimeHook
var attendancesTimeAfterSelectHooks []AttendancesTimeHook
var attendancesTimeAfterUpdateHooks []AttendancesTimeHook
var attendancesTimeAfterDeleteHooks []AttendancesTimeHook
var attendancesTimeAfterUpsertHooks []AttendancesTimeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AttendancesTime) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AttendancesTime) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AttendancesTime) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AttendancesTime) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AttendancesTime) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AttendancesTime) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AttendancesTime) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AttendancesTime) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AttendancesTime) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attendancesTimeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttendancesTimeHook registers your hook function for all future operations.
func AddAttendancesTimeHook(hookPoint boil.HookPoint, attendancesTimeHook AttendancesTimeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		attendancesTimeBeforeInsertHooks = append(attendancesTimeBeforeInsertHooks, attendancesTimeHook)
	case boil.BeforeUpdateHook:
		attendancesTimeBeforeUpdateHooks = append(attendancesTimeBeforeUpdateHooks, attendancesTimeHook)
	case boil.BeforeDeleteHook:
		attendancesTimeBeforeDeleteHooks = append(attendancesTimeBeforeDeleteHooks, attendancesTimeHook)
	case boil.BeforeUpsertHook:
		attendancesTimeBeforeUpsertHooks = append(attendancesTimeBeforeUpsertHooks, attendancesTimeHook)
	case boil.AfterInsertHook:
		attendancesTimeAfterInsertHooks = append(attendancesTimeAfterInsertHooks, attendancesTimeHook)
	case boil.AfterSelectHook:
		attendancesTimeAfterSelectHooks = append(attendancesTimeAfterSelectHooks, attendancesTimeHook)
	case boil.AfterUpdateHook:
		attendancesTimeAfterUpdateHooks = append(attendancesTimeAfterUpdateHooks, attendancesTimeHook)
	case boil.AfterDeleteHook:
		attendancesTimeAfterDeleteHooks = append(attendancesTimeAfterDeleteHooks, attendancesTimeHook)
	case boil.AfterUpsertHook:
		attendancesTimeAfterUpsertHooks = append(attendancesTimeAfterUpsertHooks, attendancesTimeHook)
	}
}

// OneG returns a single attendancesTime record from the query using the global executor.
func (q attendancesTimeQuery) OneG(ctx context.Context) (*AttendancesTime, error) {
	return q.One(ctx, boil.GetContextDB())
}

// OneGP returns a single attendancesTime record from the query using the global executor, and panics on error.
func (q attendancesTimeQuery) OneGP(ctx context.Context) *AttendancesTime {
	o, err := q.One(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single attendancesTime record from the query, and panics on error.
func (q attendancesTimeQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *AttendancesTime {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single attendancesTime record from the query.
func (q attendancesTimeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AttendancesTime, error) {
	o := &AttendancesTime{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for attendances_time")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AttendancesTime records from the query using the global executor.
func (q attendancesTimeQuery) AllG(ctx context.Context) (AttendancesTimeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// AllGP returns all AttendancesTime records from the query using the global executor, and panics on error.
func (q attendancesTimeQuery) AllGP(ctx context.Context) AttendancesTimeSlice {
	o, err := q.All(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all AttendancesTime records from the query, and panics on error.
func (q attendancesTimeQuery) AllP(ctx context.Context, exec boil.ContextExecutor) AttendancesTimeSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AttendancesTime records from the query.
func (q attendancesTimeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttendancesTimeSlice, error) {
	var o []*AttendancesTime

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to AttendancesTime slice")
	}

	if len(attendancesTimeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AttendancesTime records in the query, and panics on error.
func (q attendancesTimeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// CountGP returns the count of all AttendancesTime records in the query using the global executor, and panics on error.
func (q attendancesTimeQuery) CountGP(ctx context.Context) int64 {
	c, err := q.Count(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all AttendancesTime records in the query, and panics on error.
func (q attendancesTimeQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AttendancesTime records in the query.
func (q attendancesTimeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count attendances_time rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q attendancesTimeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q attendancesTimeQuery) ExistsGP(ctx context.Context) bool {
	e, err := q.Exists(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q attendancesTimeQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q attendancesTimeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if attendances_time exists")
	}

	return count > 0, nil
}

// AttendancesTimes retrieves all the records using an executor.
func AttendancesTimes(mods ...qm.QueryMod) attendancesTimeQuery {
	mods = append(mods, qm.From("`attendances_time`"))
	return attendancesTimeQuery{NewQuery(mods...)}
}

// FindAttendancesTimeG retrieves a single record by ID.
func FindAttendancesTimeG(ctx context.Context, iD uint, selectCols ...string) (*AttendancesTime, error) {
	return FindAttendancesTime(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAttendancesTimeP retrieves a single record by ID with an executor, and panics on error.
func FindAttendancesTimeP(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) *AttendancesTime {
	retobj, err := FindAttendancesTime(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAttendancesTimeGP retrieves a single record by ID, and panics on error.
func FindAttendancesTimeGP(ctx context.Context, iD uint, selectCols ...string) *AttendancesTime {
	retobj, err := FindAttendancesTime(ctx, boil.GetContextDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAttendancesTime retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttendancesTime(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*AttendancesTime, error) {
	attendancesTimeObj := &AttendancesTime{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `attendances_time` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, attendancesTimeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from attendances_time")
	}

	return attendancesTimeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AttendancesTime) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AttendancesTime) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AttendancesTime) InsertGP(ctx context.Context, columns boil.Columns) {
	if err := o.Insert(ctx, boil.GetContextDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttendancesTime) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no attendances_time provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attendancesTimeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attendancesTimeInsertCacheMut.RLock()
	cache, cached := attendancesTimeInsertCache[key]
	attendancesTimeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attendancesTimeAllColumns,
			attendancesTimeColumnsWithDefault,
			attendancesTimeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attendancesTimeType, attendancesTimeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attendancesTimeType, attendancesTimeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `attendances_time` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `attendances_time` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `attendances_time` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, attendancesTimePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into attendances_time")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == attendancesTimeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "database: unable to populate default values for attendances_time")
	}

CacheNoHooks:
	if !cached {
		attendancesTimeInsertCacheMut.Lock()
		attendancesTimeInsertCache[key] = cache
		attendancesTimeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AttendancesTime record using the global executor.
// See Update for more documentation.
func (o *AttendancesTime) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// UpdateP uses an executor to update the AttendancesTime, and panics on error.
// See Update for more documentation.
func (o *AttendancesTime) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateGP a single AttendancesTime record using the global executor. Panics on error.
// See Update for more documentation.
func (o *AttendancesTime) UpdateGP(ctx context.Context, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, boil.GetContextDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the AttendancesTime.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttendancesTime) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attendancesTimeUpdateCacheMut.RLock()
	cache, cached := attendancesTimeUpdateCache[key]
	attendancesTimeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attendancesTimeAllColumns,
			attendancesTimePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update attendances_time, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `attendances_time` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, attendancesTimePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attendancesTimeType, attendancesTimeMapping, append(wl, attendancesTimePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update attendances_time row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for attendances_time")
	}

	if !cached {
		attendancesTimeUpdateCacheMut.Lock()
		attendancesTimeUpdateCache[key] = cache
		attendancesTimeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q attendancesTimeQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllG updates all rows with the specified column values.
func (q attendancesTimeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q attendancesTimeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for attendances_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for attendances_time")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AttendancesTimeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AttendancesTimeSlice) UpdateAllGP(ctx context.Context, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, boil.GetContextDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AttendancesTimeSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttendancesTimeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attendancesTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `attendances_time` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, attendancesTimePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in attendancesTime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all attendancesTime")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AttendancesTime) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *AttendancesTime) UpsertGP(ctx context.Context, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *AttendancesTime) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLAttendancesTimeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttendancesTime) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no attendances_time provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attendancesTimeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAttendancesTimeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attendancesTimeUpsertCacheMut.RLock()
	cache, cached := attendancesTimeUpsertCache[key]
	attendancesTimeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attendancesTimeAllColumns,
			attendancesTimeColumnsWithDefault,
			attendancesTimeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			attendancesTimeAllColumns,
			attendancesTimePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("database: unable to upsert attendances_time, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "attendances_time", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `attendances_time` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(attendancesTimeType, attendancesTimeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attendancesTimeType, attendancesTimeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "database: unable to upsert for attendances_time")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == attendancesTimeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(attendancesTimeType, attendancesTimeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "database: unable to retrieve unique values for attendances_time")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "database: unable to populate default values for attendances_time")
	}

CacheNoHooks:
	if !cached {
		attendancesTimeUpsertCacheMut.Lock()
		attendancesTimeUpsertCache[key] = cache
		attendancesTimeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AttendancesTime record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AttendancesTime) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// DeleteP deletes a single AttendancesTime record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AttendancesTime) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteGP deletes a single AttendancesTime record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AttendancesTime) DeleteGP(ctx context.Context) int64 {
	rowsAff, err := o.Delete(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single AttendancesTime record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttendancesTime) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no AttendancesTime provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attendancesTimePrimaryKeyMapping)
	sql := "DELETE FROM `attendances_time` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from attendances_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for attendances_time")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q attendancesTimeQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q attendancesTimeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no attendancesTimeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from attendances_time")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for attendances_time")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AttendancesTimeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AttendancesTimeSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AttendancesTimeSlice) DeleteAllGP(ctx context.Context) int64 {
	rowsAff, err := o.DeleteAll(ctx, boil.GetContextDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttendancesTimeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attendancesTimeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attendancesTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `attendances_time` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, attendancesTimePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from attendancesTime slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for attendances_time")
	}

	if len(attendancesTimeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AttendancesTime) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no AttendancesTime provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *AttendancesTime) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *AttendancesTime) ReloadGP(ctx context.Context) {
	if err := o.Reload(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttendancesTime) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttendancesTime(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttendancesTimeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty AttendancesTimeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AttendancesTimeSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AttendancesTimeSlice) ReloadAllGP(ctx context.Context) {
	if err := o.ReloadAll(ctx, boil.GetContextDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttendancesTimeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttendancesTimeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attendancesTimePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `attendances_time`.* FROM `attendances_time` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, attendancesTimePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in AttendancesTimeSlice")
	}

	*o = slice

	return nil
}

// AttendancesTimeExistsG checks if the AttendancesTime row exists.
func AttendancesTimeExistsG(ctx context.Context, iD uint) (bool, error) {
	return AttendancesTimeExists(ctx, boil.GetContextDB(), iD)
}

// AttendancesTimeExistsP checks if the AttendancesTime row exists. Panics on error.
func AttendancesTimeExistsP(ctx context.Context, exec boil.ContextExecutor, iD uint) bool {
	e, err := AttendancesTimeExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AttendancesTimeExistsGP checks if the AttendancesTime row exists. Panics on error.
func AttendancesTimeExistsGP(ctx context.Context, iD uint) bool {
	e, err := AttendancesTimeExists(ctx, boil.GetContextDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AttendancesTimeExists checks if the AttendancesTime row exists.
func AttendancesTimeExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `attendances_time` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if attendances_time exists")
	}

	return exists, nil
}
